// ====== 1. BI·∫æN TO√ÄN C·ª§C ======
let questions = [];
let currentPage = 1;
const pageSize = 15;
let showFavoritesOnly = false;

// ====== 2. TI·ªÜN √çCH CHUNG ======
// Lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát ƒë·ªÉ t√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát d·∫•u
function removeVietnameseTones(str) {
    return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "").replace(/ƒë/g, "d").replace(/ƒê/g, "D");
}

// ====== 3. H√ÄM KH·ªûI T·∫†O DOM ======
document.addEventListener("DOMContentLoaded", () => {
    loadQuestions();

    // G√°n c√°c s·ª± ki·ªán n√∫t
    document.getElementById("toggle-form-btn").addEventListener("click", () => {
        const form = document.getElementById("slide-form");
        form.style.display = form.style.display === "flex" ? "none" : "flex";
        resetForm();
        document.getElementById("form-title").innerText = "Th√™m / S·ª≠a C√¢u h·ªèi";
        // ƒê√≥ng navbar khi m·ªü form
        document.querySelector(".navbar").classList.remove("active");
    });

    document.getElementById("favorite-toggle-btn").addEventListener("click", () => {
        showFavoritesOnly = !showFavoritesOnly;
        currentPage = 1;
        renderQuestions();
    });

    document.getElementById("close-form").addEventListener("click", () => {
        document.getElementById("slide-form").style.display = "none";
        // M·ªü l·∫°i navbar khi ƒë√≥ng form (n·∫øu tr∆∞·ªõc ƒë√≥ ƒë√£ m·ªü)
        if (document.querySelector(".menu-toggle") && document.querySelector(".menu-toggle").classList.contains("active")) {
            document.querySelector(".navbar").classList.add("active");
        }
    });

    document.getElementById("missing-answer-btn").addEventListener("click", () => {
        const missing = questions.filter(q =>
            q.correct === undefined || q.correct === "undefined" || q.correct.trim() === ""
        );
        currentPage = 1;
        renderSearchResults(missing);
    });

    // Th√™m s·ª± ki·ªán cho n√∫t t√¨m c√¢u gi·ªëng nhau
    const findSimilarBtn = document.getElementById("find-similar-btn");
    if (findSimilarBtn) {
        findSimilarBtn.addEventListener("click", () => {
            const input = prompt("Nh·∫≠p ng∆∞·ª°ng t·ª∑ l·ªá gi·ªëng nhau t·ªëi thi·ªÉu (0.0 ƒë·∫øn 1.0, m·∫∑c ƒë·ªãnh 0.8):", "0.8");
            if (input === null) return;

            const threshold = parseFloat(input.trim()) || 0.8;
            if (threshold < 0 || threshold > 1) {
                alert("Ng∆∞·ª°ng kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p gi√° tr·ªã t·ª´ 0.0 ƒë·∫øn 1.0.");
                return;
            }
            findSimilarQuestions(threshold); // G·ªçi h√†m t√¨m ki·∫øm
        });
    }

    document.querySelector(".search-input").addEventListener("input", handleSearch);
    document.querySelector(".search-input2").addEventListener("input", handleSearch2);

    // L·ªçc c√°c c√¢u l·ªói theo th·ª© t·ª± t·ª´ nhi·ªÅu ƒë·∫øn √≠t
    document.getElementById("wrongcount-btn").addEventListener("click", () => {
        const filtered = questions
            .filter(q => typeof q.wrongCount === "number")
            .sort((a, b) => b.wrongCount - a.wrongCount);

        currentPage = 1;
        renderSearchResults(filtered);
    });

    // Reset d·ªØ li·ªáu c√°c c√¢u sai
    document.getElementById("reset-wrongcount-btn").addEventListener("click", async () => {
        if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën ƒë·∫∑t l·∫°i s·ªë l·∫ßn sai v·ªÅ 0 cho t·∫•t c·∫£ c√¢u h·ªèi?")) return;

        questions.forEach(q => {
            if (typeof q.wrongCount === "number") q.wrongCount = 0;
        });

        await saveToFile();
        renderQuestions();
    });

    // Th√™m n√∫t menu m·ªõi ƒë·ªÉ toggle navbar
    const menuToggle = document.createElement("button");
    menuToggle.textContent = "‚ò∞";
    menuToggle.className = "menu-toggle";
    // Ki·ªÉm tra xem .hamburger c√≥ t·ªìn t·∫°i tr∆∞·ªõc khi ch√®n
    const hamburgerBtn = document.querySelector(".hamburger");
    if (hamburgerBtn) {
        hamburgerBtn.parentNode.insertBefore(menuToggle, hamburgerBtn);
        menuToggle.addEventListener("click", () => {
            const navbar = document.querySelector(".navbar");
            navbar.classList.toggle("active");
            // ƒê√≥ng form khi m·ªü navbar
            if (navbar.classList.contains("active")) {
                document.getElementById("slide-form").classList.remove("active");
            }
        });
    }


    // Hamburger toggle form
    if (hamburgerBtn) { // Ki·ªÉm tra l·∫ßn n·ªØa
        hamburgerBtn.addEventListener("click", () => {
            const slideForm = document.getElementById("slide-form");
            slideForm.classList.toggle("active");
            // ƒê√≥ng navbar khi m·ªü form
            if (slideForm.classList.contains("active")) {
                document.querySelector(".navbar").classList.remove("active");
            }
        });
    }

    // Toggle search box
    const toggleBtn = document.getElementById("mobile-search-toggle");
    const searchBox = document.getElementById("mobile-search-box");
    toggleBtn.addEventListener("click", () => {
        searchBox.classList.toggle("show");
    });

    // ƒê√≥ng form v√† navbar khi nh·∫•p ra ngo√†i
    document.addEventListener("click", (event) => {
        const slideForm = document.getElementById("slide-form");
        const navbar = document.querySelector(".navbar");
        const hamburger = document.querySelector(".hamburger");
        const menuToggle = document.querySelector(".menu-toggle");

        const isClickInsideForm = slideForm.contains(event.target);
        const isClickInsideNavbar = navbar.contains(event.target);
        const isClickOnHamburger = hamburger ? hamburger.contains(event.target) : false;
        const isClickOnMenuToggle = menuToggle ? menuToggle.contains(event.target) : false;


        if (!isClickInsideForm && !isClickOnHamburger && slideForm.classList.contains("active")) {
            slideForm.classList.remove("active");
        }
        if (!isClickInsideNavbar && !isClickOnMenuToggle && navbar.classList.contains("active")) {
            navbar.classList.remove("active");
        }
    });

    // ƒê·∫∑t ch·∫ø ƒë·ªô t·ªëi l√†m m·∫∑c ƒë·ªãnh khi t·∫£i trang
    document.body.classList.add('dark');
    const themeToggle = document.getElementById('theme-toggle');
    themeToggle.addEventListener('click', () => {
        document.body.classList.toggle('dark');
        themeToggle.textContent = document.body.classList.contains('dark') ? 'Ch·∫ø ƒë·ªô S√°ng' : 'Ch·∫ø ƒë·ªô T·ªëi';
    });
});

// ====== 4. D·ªÆ LI·ªÜU: T·∫¢I & L∆ØU FILE ======
async function loadQuestions() {
    try {
        const res = await fetch('/questions');
        if (!res.ok) {
            if (res.status === 404) {
                console.warn("Kh√¥ng t√¨m th·∫•y file questions.json. Kh·ªüi t·∫°o danh s√°ch c√¢u h·ªèi r·ªóng.");
                questions = [];
            } else {
                throw new Error(`L·ªói t·∫£i c√¢u h·ªèi: ${res.statusText}`);
            }
        } else {
            questions = await res.json();
        }

    } catch (error) {
        console.error("L·ªói khi t·∫£i c√¢u h·ªèi:", error);
        questions = []; // ƒê·∫£m b·∫£o questions l√† m·ªôt m·∫£ng r·ªóng n·∫øu c√≥ l·ªói
    }


    // ƒê·∫£m b·∫£o m·ªói c√¢u h·ªèi ƒë·ªÅu c√≥ thu·ªôc t√≠nh favorite v√† chu·∫©n h√≥a xu·ªëng d√≤ng
    questions.forEach(q => {
        if (typeof q.favorite === "undefined") q.favorite = false;
        // Chu·∫©n h√≥a: ƒê·∫£m b·∫£o t·∫•t c·∫£ c√¢u h·ªèi trong b·ªô nh·ªõ d√πng \n thay v√¨ <br>
        q.question = q.question.replace(/<br>/g, '\n');
    });

    renderQuestions();
}

async function saveToFile() {
    try {
        const res = await fetch('/save-questions', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(questions),
        });
        if (!res.ok) {
            throw new Error(`L·ªói l∆∞u c√¢u h·ªèi: ${res.statusText}`);
        }
    } catch (error) {
        console.error("L·ªói khi l∆∞u c√¢u h·ªèi:", error);
        alert("L·ªói khi l∆∞u c√¢u h·ªèi. Vui l√≤ng ki·ªÉm tra server.");
    }
}

// ====== 5. HI·ªÇN TH·ªä GIAO DI·ªÜN (Render) ======
function renderQuestions() {
    const container = document.getElementById("questions-container");
    container.innerHTML = "";

    // X√≥a th√¥ng b√°o t√¨m ki·∫øm gi·ªëng nhau khi tr·ªü v·ªÅ ch·∫ø ƒë·ªô xem th∆∞·ªùng
    const infoArea = document.getElementById("info-area");
    if (infoArea) infoArea.innerHTML = "";

    let list = showFavoritesOnly ? questions.filter(q => q.favorite) : questions;
    const totalPages = Math.ceil(list.length / pageSize);
    if (currentPage > totalPages) currentPage = totalPages || 1;
    if (currentPage < 1 && totalPages > 0) currentPage = 1; // Kh·∫Øc ph·ª•c tr∆∞·ªùng h·ª£p currentPage = 0 khi kh√¥ng c√≥ c√¢u h·ªèi

    const start = (currentPage - 1) * pageSize;
    const pageItems = list.slice(start, start + pageSize);

    if (pageItems.length === 0 && list.length > 0 && currentPage > 1) {
        // N·∫øu kh√¥ng c√≥ item n√†o tr√™n trang hi·ªán t·∫°i nh∆∞ng v·∫´n c√≥ list (do xo√° item cu·ªëi c·ªßa trang)
        currentPage--;
        renderQuestions(); // Render l·∫°i trang tr∆∞·ªõc ƒë√≥
        return;
    }


    pageItems.forEach((q, index) => {
        const realIndex = questions.indexOf(q);
        const div = document.createElement("div");
        div.className = "question";

        // CH·ªà CHUY·ªÇN \n SANG <br> KHI HI·ªÇN TH·ªä RA HTML
        const formattedQuestion = q.question.replace(/\n/g, '<br>');

        // ·∫¢nh + n√∫t xo√° ·∫£nh (n·∫øu c√≥ ·∫£nh)
        const imageHtml = q.image
            ? `
            <div class="image-container">
                <img src="${q.image}" class="thumbnail" onclick="enlargeImage('${q.image}')"/>
                <button class="remove-image-btn" onclick="removeImage(${realIndex})">üóë X√≥a ·∫£nh</button>
            </div>
            `
            : "";

        // S·ª¨ D·ª§NG TH·∫∫ <strong> B√åNH TH∆Ø·ªúNG V·ªöI N·ªòI DUNG ƒê√É FORMAT
        div.innerHTML = `
            <strong>${start + index + 1}. ${formattedQuestion}</strong><br>
            ${imageHtml}
            ${q.answers.map((a, i) => `<div>${String.fromCharCode(65 + i)}: ${a}</div>`).join('')}
            <div>ƒê√°p √°n ƒë√∫ng: ${q.correct || ''}</div>
            <button onclick="editQuestion(${realIndex})">‚úè S·ª≠a</button>
            <button onclick="deleteQuestion(${realIndex})">üóë X√≥a</button>
            <button class="fav-btn" onclick="toggleFavorite(${realIndex})">${q.favorite ? "‚≠ê" : "‚òÜ"}</button>
            ${typeof q.wrongCount === "number" ? `<div class="wrong-count">Sai: ${q.wrongCount} l·∫ßn</div>` : ""}
        `;

        container.appendChild(div);
    });

    renderPagination(totalPages);
}

function renderSearchResults(list) {
    const container = document.getElementById("questions-container");
    container.innerHTML = "";

    // X√≥a th√¥ng b√°o t√¨m ki·∫øm gi·ªëng nhau khi ·ªü ch·∫ø ƒë·ªô xem k·∫øt qu·∫£ t√¨m ki·∫øm th∆∞·ªùng
    const infoArea = document.getElementById("info-area");
    if (infoArea) infoArea.innerHTML = "";

    const totalPages = Math.ceil(list.length / pageSize);
    if (currentPage > totalPages) currentPage = totalPages || 1;
    if (currentPage < 1 && totalPages > 0) currentPage = 1; // Kh·∫Øc ph·ª•c tr∆∞·ªùng h·ª£p currentPage = 0 khi kh√¥ng c√≥ c√¢u h·ªèi

    const start = (currentPage - 1) * pageSize;
    const pageItems = list.slice(start, start + pageSize);

    if (pageItems.length === 0 && list.length > 0 && currentPage > 1) {
        currentPage--;
        renderSearchResults(list); // Render l·∫°i trang tr∆∞·ªõc ƒë√≥
        return;
    }


    pageItems.forEach((q, index) => {
        const realIndex = questions.indexOf(q);
        const div = document.createElement("div");
        div.className = "question";

        // CH·ªà CHUY·ªÇN \n SANG <br> KHI HI·ªÇN TH·ªä RA HTML
        const formattedQuestion = q.question.replace(/\n/g, '<br>');

        // ·∫¢nh + n√∫t xo√° ·∫£nh (n·∫øu c√≥ ·∫£nh) - C·∫ßn th√™m c·∫£ v√†o search results n·∫øu mu·ªën hi·ªÉn th·ªã
        const imageHtml = q.image
            ? `
            <div class="image-container">
                <img src="${q.image}" class="thumbnail" onclick="enlargeImage('${q.image}')"/>
                <button class="remove-image-btn" onclick="removeImage(${realIndex})">üóë X√≥a ·∫£nh</button>
            </div>
            `
            : "";

        // S·ª¨ D·ª§NG TH·∫∫ <strong> B√åNH TH∆Ø·ªúNG V·ªöI N·ªòI DUNG ƒê√É FORMAT
        div.innerHTML = `
            <strong>${start + index + 1}. ${formattedQuestion}</strong><br>
            ${imageHtml}
            ${q.answers.map((a, i) => `<div>${String.fromCharCode(65 + i)}: ${a}</div>`).join('')}
            <div>ƒê√°p √°n ƒë√∫ng: ${q.correct || ''}</div>
            <button onclick="editQuestion(${realIndex})">‚úè S·ª≠a</button>
            <button onclick="deleteQuestion(${realIndex})">üóë X√≥a</button>
            <button class="fav-btn" onclick="toggleFavorite(${realIndex})">${q.favorite ? "‚≠ê" : "‚òÜ"}</button>
            ${typeof q.wrongCount === "number" ? `<div class="wrong-count">Sai: ${q.wrongCount} l·∫ßn</div>` : ""}
        `;
        container.appendChild(div);
    });

    renderCustomPagination(totalPages, list);
}

function renderPagination(totalPages) {
    const pagination = document.getElementById("pagination-controls");
    pagination.innerHTML = "";

    const maxVisible = 3;

    const createButton = (label, page = null, disabled = false) => {
        const btn = document.createElement("button");
        btn.textContent = label;
        if (page !== null) {
            btn.onclick = () => {
                currentPage = page;
                renderQuestions();
            };
        }
        if (disabled) btn.disabled = true;
        if (page === currentPage) btn.classList.add("active-page");
        return btn;
    };

    if (totalPages <= 1) return;

    // N√∫t Trang ƒë·∫ßu
    pagination.appendChild(createButton("¬´", 1, currentPage === 1));

    // N√∫t Trang tr∆∞·ªõc
    pagination.appendChild(createButton("<", currentPage - 1, currentPage === 1));


    let startPage = Math.max(1, currentPage - Math.floor(maxVisible / 2));
    let endPage = Math.min(totalPages, currentPage + Math.floor(maxVisible / 2));

    if (endPage - startPage + 1 < maxVisible) {
        if (startPage === 1) {
            endPage = Math.min(totalPages, startPage + maxVisible - 1);
        } else if (endPage === totalPages) {
            startPage = Math.max(1, endPage - maxVisible + 1);
        }
    }

    if (startPage > 1) {
        pagination.appendChild(createButton("...", null, true));
    }

    for (let i = startPage; i <= endPage; i++) {
        pagination.appendChild(createButton(i, i));
    }

    if (endPage < totalPages) {
        pagination.appendChild(createButton("...", null, true));
    }

    // N√∫t Trang sau
    pagination.appendChild(createButton(">", currentPage + 1, currentPage === totalPages));

    // N√∫t Trang cu·ªëi
    pagination.appendChild(createButton("¬ª", totalPages, currentPage === totalPages));
}

function renderCustomPagination(totalPages, currentList) {
    const pagination = document.getElementById("pagination-controls");
    pagination.innerHTML = "";

    if (totalPages <= 1) return;

    const maxVisible = 3;
    const createButton = (label, page = null, disabled = false) => {
        const btn = document.createElement("button");
        btn.textContent = label;
        if (page !== null) {
            btn.onclick = () => {
                currentPage = page;

                // Ki·ªÉm tra xem c√≥ ƒëang ·ªü ch·∫ø ƒë·ªô xem k·∫øt qu·∫£ t√¨m ki·∫øm gi·ªëng nhau kh√¥ng
                if (currentList && currentList.length > 0 && currentList[0].similarity !== undefined) {
                    renderSimilarResults(currentList);
                } else {
                    renderSearchResults(currentList); ¬†// s·ª≠ d·ª•ng l·∫°i danh s√°ch hi·ªán t·∫°i cho t√¨m ki·∫øm th∆∞·ªùng
                }
            };
        }
        if (disabled) btn.disabled = true;
        if (page === currentPage) btn.classList.add("active-page");
        return btn;
    };

    // N√∫t Trang ƒë·∫ßu
    pagination.appendChild(createButton("¬´", 1, currentPage === 1));

    // N√∫t Trang tr∆∞·ªõc
    pagination.appendChild(createButton("<", currentPage - 1, currentPage === 1));

    let startPage = Math.max(1, currentPage - Math.floor(maxVisible / 2));
    let endPage = Math.min(totalPages, currentPage + Math.floor(maxVisible / 2));

    if (endPage - startPage + 1 < maxVisible) {
        if (startPage === 1) {
            endPage = Math.min(totalPages, startPage + maxVisible - 1);
        } else if (endPage === totalPages) {
            startPage = Math.max(1, endPage - maxVisible + 1);
        }
    }

    if (startPage > 1) {
        pagination.appendChild(createButton("...", null, true));
    }

    for (let i = startPage; i <= endPage; i++) {
        pagination.appendChild(createButton(i, i));
    }

    if (endPage < totalPages) {
        pagination.appendChild(createButton("...", null, true));
    }

    // N√∫t Trang sau
    pagination.appendChild(createButton(">", currentPage + 1, currentPage === totalPages));

    // N√∫t Trang cu·ªëi
    pagination.appendChild(createButton("¬ª", totalPages, currentPage === totalPages));
}

// ====== 6. X·ª¨ L√ù C√ÇU H·ªéI ======
function toggleFavorite(index) {
    questions[index].favorite = !questions[index].favorite;
    saveToFile();
    renderQuestions();
}

function editQuestion(index) {
    const q = questions[index];
    const form = document.getElementById("slide-form");
    form.style.display = "flex";

    document.getElementById("edit-index").value = index;
    // q.question ƒë√£ ch·ª©a \n sau khi loadQuestions() chu·∫©n h√≥a
    document.getElementById("question-text").value = q.question;
    document.getElementById("answer-A").value = q.answers[0];
    document.getElementById("answer-B").value = q.answers[1];
    document.getElementById("answer-C").value = q.answers[2];
    document.getElementById("answer-D").value = q.answers[3];
    document.getElementById("correct-answer").value = q.correct;
    document.getElementById("form-title").innerText = "Ch·ªânh s·ª≠a C√¢u h·ªèi";
}

async function saveQuestion() {
    const index = document.getElementById("edit-index").value;
    const imageInput = document.getElementById("imageInput");

    // L·∫•y n·ªôi dung t·ª´ textarea, n√≥ ƒë√£ ch·ª©a \n n·∫øu ng∆∞·ªùi d√πng nh·∫≠p
    const rawQuestion = document.getElementById("question-text").value.trim();

    const newQuestion = {
        question: rawQuestion, // L∆ØU TR·ª∞C TI·∫æP rawQuestion (c√≥ \n)
        answers: [
            document.getElementById("answer-A").value.trim(),
            document.getElementById("answer-B").value.trim(),
            document.getElementById("answer-C").value.trim(),
            document.getElementById("answer-D").value.trim(),
        ],
        correct: document.getElementById("correct-answer").value.trim(),
        favorite: false
    };

    // üëâ N·∫øu c√≥ ch·ªçn ·∫£nh, th√™m key image
    if (imageInput.files.length > 0) {
        const fileName = imageInput.files[0].name;
        // Gi·∫£ ƒë·ªãnh ·∫£nh ƒë∆∞·ª£c l∆∞u ·ªü ƒë√¢y
        newQuestion.image = `/admin/images/${fileName}`;
    }

    if (index) {
        // N·∫øu s·ª≠a v√† c√≥ ·∫£nh m·ªõi th√¨ ghi ƒë√®, kh√¥ng th√¨ gi·ªØ ·∫£nh c≈©
        if (!newQuestion.image && questions[index].image) {
            newQuestion.image = questions[index].image;
        }
        // ƒê·∫£m b·∫£o c√°c thu·ªôc t√≠nh kh√°c (wrongCount) ƒë∆∞·ª£c gi·ªØ l·∫°i khi ch·ªânh s·ª≠a
        questions[index] = { ...questions[index], ...newQuestion };
    } else {
        const duplicate = questions.find(q => q.question === newQuestion.question);
        if (duplicate) {
            const confirmAdd = confirm("C√¢u h·ªèi ƒë√£ t·ªìn t·∫°i. B·∫°n c√≥ mu·ªën th√™m b·∫£n sao?");
            if (!confirmAdd) return;
        }
        questions.push(newQuestion);
    }

    await saveToFile(); ¬† ¬† ¬† ¬† // ghi v√†o file baomat.json
    resetForm(); ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†// reset form
    document.getElementById("slide-form").style.display = "none";
    renderQuestions(); ¬† ¬† ¬† ¬† ¬†// c·∫≠p nh·∫≠t l·∫°i danh s√°ch
}

async function deleteQuestion(index) {
    if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a c√¢u h·ªèi n√†y?")) return;
    questions.splice(index, 1);
    await saveToFile();
    renderQuestions();
}

// ====== 7. T√åM KI·∫æM (Search) ======
function handleSearch() {
    const keyword = removeVietnameseTones(document.querySelector(".search-input").value.trim().toLowerCase());

    if (!keyword) {
        renderQuestions(); // N·∫øu √¥ t√¨m ki·∫øm r·ªóng -> render to√†n b·ªô nh∆∞ b√¨nh th∆∞·ªùng
        return;
    }

    const list = showFavoritesOnly ? questions.filter(q => q.favorite) : questions;

    const filtered = list.filter(q => {
        // q.question ƒë√£ ch·ª©a \n
        const text = removeVietnameseTones(q.question.toLowerCase());
        const answers = q.answers.map(a => removeVietnameseTones(a.toLowerCase())).join(" ");
        const correct = removeVietnameseTones((q.correct || "").toLowerCase());
        return text.includes(keyword) || answers.includes(keyword) || correct.includes(keyword);
    });

    currentPage = 1;
    renderSearchResults(filtered);
}
function handleSearch2() {
    const keyword = removeVietnameseTones(document.querySelector(".search-input2").value.trim().toLowerCase());

    if (!keyword) {
        renderQuestions(); // N·∫øu √¥ t√¨m ki·∫øm r·ªóng -> render to√†n b·ªô nh∆∞ b√¨nh th∆∞·ªùng
        return;
    }

    const list = showFavoritesOnly ? questions.filter(q => q.favorite) : questions;

    const filtered = list.filter(q => {
        // q.question ƒë√£ ch·ª©a \n
        const text = removeVietnameseTones(q.question.toLowerCase());
        const answers = q.answers.map(a => removeVietnameseTones(a.toLowerCase())).join(" ");
        const correct = removeVietnameseTones((q.correct || "").toLowerCase());
        return text.includes(keyword) || answers.includes(keyword) || correct.includes(keyword);
    });

    currentPage = 1;
    renderSearchResults(filtered);
}


// ====== 8. CU·ªòN TRANG & QUAY TRO LAI & RESET FORM ======
function scrollToTop() {
    const content = document.getElementById("content-area");
    content.scrollTo({ top: 0, behavior: "smooth" });
}

function scrollToBottom() {
    const content = document.getElementById("content-area");
    content.scrollTo({ top: content.scrollHeight, behavior: "smooth" });
}

function goBack() {
    const urlParams = new URLSearchParams(window.location.search);
    const from = urlParams.get('from');

    // N·∫øu c√≥ from th√¨ quay l·∫°i ƒë√∫ng ƒë∆∞·ªùng d·∫´n g·ªëc
    if (from) {
        window.location.href = from;
    } else {
        // N·∫øu kh√¥ng c√≥ from, fallback v·ªÅ trang ch·ªß m·∫∑c ƒë·ªãnh
        window.location.href = '/';
    }
}


function resetForm() {
    document.getElementById("edit-index").value = "";
    document.getElementById("question-text").value = "";
    ["A", "B", "C", "D"].forEach(l => document.getElementById("answer-" + l).value = "");
    document.getElementById("correct-answer").value = "A";
    document.getElementById("imageInput").value = ""; // X√≥a file ƒë√£ ch·ªçn
    document.getElementById("form-title").innerText = "Th√™m / S·ª≠a C√¢u h·ªèi";
}

// ====== 9. XU·∫§T PDF ======
async function exportToPDF(includeAnswers = false) {
    const container = document.createElement('div');
    container.style.padding = '20px';
    container.style.backgroundColor = 'white';
    container.style.color = 'black';
    container.style.fontFamily = 'Arial, sans-serif';
    container.style.fontSize = '14px';
    container.style.width = '800px'; // fix ƒë·ªô r·ªông ƒë·ªÉ canh trang t·ªët h∆°n

    questions.forEach((q, index) => {
        const div = document.createElement('div');
        div.style.marginBottom = '15px';

        // q.question ƒë√£ ch·ª©a \n, white-space: pre-wrap s·∫Ω x·ª≠ l√Ω ƒë√∫ng
        let html = `<div style="white-space: pre-wrap;"><b>${index + 1}. ${q.question}</b></div>`; // D√πng div v·ªõi white-space: pre-wrap

        // Th√™m ·∫£nh n·∫øu c√≥
        if (q.image) {
            html += `<img src="${q.image}" style="max-width: 100%; height: auto; margin-top: 5px; margin-bottom: 10px;"/><br>`;
        }

        q.answers.forEach((ans, i) => {
            const letter = String.fromCharCode(65 + i);
            html += `${letter}. ${ans}<br>`;
        });
        if (includeAnswers && q.correct) {
            html += `<i>ƒê√°p √°n ƒë√∫ng: ${q.correct}</i>`;
        }
        div.innerHTML = html;
        container.appendChild(div);
    });

    // Th√™m v√†o body ƒë·ªÉ html2pdf c√≥ th·ªÉ x·ª≠ l√Ω, sau ƒë√≥ lo·∫°i b·ªè
    document.body.appendChild(container);

    const opt = {
        margin: 0.5,
        filename: includeAnswers ? 'Cau_hoi_CO_dap_an.pdf' : 'Cau_hoi_KHONG_dap_an.pdf',
        image: { type: 'jpeg', quality: 0.98 },
        html2canvas: { scale: 2 },
        jsPDF: { unit: 'in', format: 'a4', orientation: 'portrait' }
    };

    await html2pdf().from(container).set(opt).save();
    document.body.removeChild(container);
}

// ====== 10. PHONG TO THU NHO ·∫¢NH ======
function enlargeImage(src) {
    const overlay = document.getElementById("imgOverlay");
    const modalImg = document.getElementById("modalImage");
    modalImg.src = src;
    overlay.style.display = "block";
    modalImg.style.display = "block";
}

function closeImage() {
    document.getElementById("imgOverlay").style.display = "none";
    document.getElementById("modalImage").style.display = "none";
}

// ====== 11. X√ìA ·∫¢NH ======
function removeImage(index) {
    questions[index].image = ""; // Reset gi√° tr·ªã ·∫£nh
    renderQuestions(); ¬† ¬† ¬† ¬† ¬† // C·∫≠p nh·∫≠t l·∫°i UI
    saveToFile(); ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†// L∆∞u l·∫°i file JSON
}

// ====== 12. T√åM C√ÅC C√ÇU GI·ªêNG NHAU ======

/**
 * T√≠nh Sorensen-Dice Coefficient ƒë·ªÉ ƒëo ƒë·ªô gi·ªëng nhau gi·ªØa hai chu·ªói.
 * @param {string} s1 Chu·ªói th·ª© nh·∫•t.
 * @param {string} s2 Chu·ªói th·ª© hai.
 * @returns {number} T·ª∑ l·ªá gi·ªëng nhau (0 ƒë·∫øn 1).
 */
function diceCoefficient(s1, s2) {
    s1 = removeVietnameseTones(s1).toLowerCase().trim();
    s2 = removeVietnameseTones(s2).toLowerCase().trim();

    // X·ª≠ l√Ω chu·ªói r·ªóng
    if (!s1 || !s2) return s1 === s2 ? 1 : 0;

    // T·∫°o t·∫≠p h·ª£p c√°c bigram (c·∫∑p k√Ω t·ª±)
    const bigrams1 = new Set();
    for (let i = 0; i < s1.length - 1; i++) {
        bigrams1.add(s1.substring(i, i + 2));
    }
    const bigrams2 = new Set();
    for (let i = 0; i < s2.length - 1; i++) {
        bigrams2.add(s2.substring(i, i + 2));
    }

    if (bigrams1.size === 0 && bigrams2.size === 0) return 1;
    if (bigrams1.size === 0 || bigrams2.size === 0) return 0;

    // T√≠nh to√°n s·ªë l∆∞·ª£ng bigram chung (Intersection)
    let intersectionSize = 0;
    bigrams1.forEach(bigram => {
        if (bigrams2.has(bigram)) {
            intersectionSize++;
        }
    });

    // C√¥ng th·ª©c Dice: 2 * |Intersection| / (|A| + |B|)
    const coefficient = (2 * intersectionSize) / (bigrams1.size + bigrams2.size);
    return coefficient;
}

/**
 * L·ªçc v√† x·∫øp h·∫°ng c√°c c·∫∑p c√¢u h·ªèi c√≥ n·ªôi dung gi·ªëng nhau.
 * @param {number} threshold Ng∆∞·ª°ng t·ª∑ l·ªá gi·ªëng nhau t·ªëi thi·ªÉu (v√≠ d·ª•: 0.8 cho 80%).
 */
function findSimilarQuestions(threshold = 0.8) {
    const similarPairs = [];
    const n = questions.length;

    // Duy·ªát qua t·∫•t c·∫£ c√°c c·∫∑p (i, j) v·ªõi i < j
    for (let i = 0; i < n; i++) {
        for (let j = i + 1; j < n; j++) {
            const q1 = questions[i];
            const q2 = questions[j];

            // Ch·ªâ so s√°nh c√¢u h·ªèi (q.question)
            const similarity = diceCoefficient(q1.question, q2.question);

            if (similarity >= threshold) {
                similarPairs.push({
                    q1: q1,
                    q2: q2,
                    similarity: similarity,
                    index1: i, // L∆∞u tr·ªØ ch·ªâ m·ª•c th·ª±c t·∫ø trong m·∫£ng questions
                    index2: j
                });
            }
        }
    }

    // S·∫Øp x·∫øp theo t·ª∑ l·ªá gi·ªëng nhau gi·∫£m d·∫ßn
    similarPairs.sort((a, b) => b.similarity - a.similarity);

    currentPage = 1;
    renderSimilarResults(similarPairs);
}

/**
 * Hi·ªÉn th·ªã c√°c c·∫∑p c√¢u h·ªèi gi·ªëng nhau.
 * @param {Array<Object>} similarPairs Danh s√°ch c√°c c·∫∑p c√¢u h·ªèi gi·ªëng nhau.
 */
function renderSimilarResults(similarPairs) {
    const container = document.getElementById("questions-container");
    container.innerHTML = "";

    const list = similarPairs;
    const totalPages = Math.ceil(list.length / pageSize);
    if (currentPage > totalPages) currentPage = totalPages || 1;
    if (currentPage < 1 && totalPages > 0) currentPage = 1;

    const start = (currentPage - 1) * pageSize;
    const pageItems = list.slice(start, start + pageSize);

    // C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ hi·ªÉn th·ªã
    const infoArea = document.getElementById("info-area");
    if (infoArea) {
        infoArea.innerHTML = `ƒê√£ t√¨m th·∫•y <strong>${similarPairs.length} c·∫∑p</strong> c√¢u h·ªèi c√≥ ƒë·ªô gi·ªëng nhau t·ª´ ${(similarPairs[0]?.similarity * 100).toFixed(2) || 0}% tr·ªü l√™n.`;
    }

    pageItems.forEach((pair, index) => {
        const div = document.createElement("div");
        div.className = "similar-pair";
        // Thay v√¨ ch·ªâ m·ª•c trang, hi·ªÉn th·ªã v·ªã tr√≠ trong danh s√°ch c·∫∑p gi·ªëng nhau
        const displayIndex = start + index + 1;

        // H√†m h·ªó tr·ª£ render m·ªôt c√¢u h·ªèi ƒë∆°n l·∫ª
        const renderQuestionBlock = (q, realIndex, tag) => {
            const formattedQuestion = q.question.replace(/\n/g, '<br>');
            const imageHtml = q.image ? `<img src="${q.image}" class="thumbnail" onclick="enlargeImage('${q.image}')"/>` : "";

            return `
                <div class="similar-question-item">
                    <div class="question-header">
                        <strong>[${tag}] C√¢u #${realIndex + 1}: ${formattedQuestion}</strong>
                    </div>
                    ${imageHtml}
                    ${q.answers.map((a, i) => `<div>${String.fromCharCode(65 + i)}: ${a}</div>`).join('')}
                    <div>ƒê√°p √°n ƒë√∫ng: ${q.correct || ''}</div>
                    <div class="question-actions">
                        <button onclick="editQuestion(${realIndex})">‚úè S·ª≠a</button>
                        <button onclick="deleteQuestion(${realIndex})">üóë X√≥a</button>
                    </div>
                </div>
            `;
        };

        div.innerHTML = `
            <div class="similarity-info">
                <strong>C·∫∑p ${displayIndex}</strong>: ƒê·ªô gi·ªëng nhau: 
                <span class="similarity-score">${(pair.similarity * 100).toFixed(2)}%</span>
            </div>
            <div class="pair-content">
                ${renderQuestionBlock(pair.q1, pair.index1, 'A')}
                ${renderQuestionBlock(pair.q2, pair.index2, 'B')}
            </div>
        `;
        container.appendChild(div);
    });

    renderCustomPagination(totalPages, list); // S·ª≠ d·ª•ng l·∫°i h√†m ph√¢n trang t√πy ch·ªânh
}


// ====== 13. NH·∫¨N DI·ªÜN GI·ªåNG N√ìI (Speech Recognition) ======
const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

if (SpeechRecognition) {
    const recognition = new SpeechRecognition();
    recognition.lang = 'vi-VN'; // Ng√¥n ng·ªØ ti·∫øng Vi·ªát
    recognition.interimResults = false; // Ch·ªâ l·∫•y k·∫øt qu·∫£ cu·ªëi c√πng
    recognition.maxAlternatives = 1;

    // H√†m x·ª≠ l√Ω nh·∫≠n di·ªán gi·ªçng n√≥i v√† ƒëi·ªÅn v√†o input
    function startSpeechRecognition(inputElement) {
        recognition.onresult = (event) => {
            const transcript = event.results[0][0].transcript;
            inputElement.value = transcript; // ƒêi·ªÅn k·∫øt qu·∫£ v√†o √¥ input
            // K√≠ch ho·∫°t s·ª± ki·ªán t√¨m ki·∫øm sau khi ƒëi·ªÅn
            const inputEvent = new Event('input', { bubbles: true });
            inputElement.dispatchEvent(inputEvent);
        };

        recognition.onerror = (event) => {
            console.error("L·ªói nh·∫≠n di·ªán gi·ªçng n√≥i:", event.error);
            alert("L·ªói nh·∫≠n di·ªán gi·ªçng n√≥i: " + event.error);
        };

        recognition.onend = () => {
            console.log("K·∫øt th√∫c nh·∫≠n di·ªán gi·ªçng n√≥i");
        };

        recognition.start();
    }

    // G√°n s·ª± ki·ªán cho n√∫t micro
    document.getElementById("voice-search-btn").addEventListener("click", () => {
        const searchInput = document.querySelector(".search-input2");
        startSpeechRecognition(searchInput);
    });

    document.getElementById("voice-search-btn2").addEventListener("click", () => {
        const searchInput = document.querySelector(".search-input");
        startSpeechRecognition(searchInput);
    });
} else {
    console.warn("Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ SpeechRecognition API.");
    document.getElementById("voice-search-btn").disabled = true;
    document.getElementById("voice-search-btn2").disabled = true;
    alert("Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ nh·∫≠n di·ªán gi·ªçng n√≥i. Vui l√≤ng s·ª≠ d·ª•ng tr√¨nh duy·ªát kh√°c (nh∆∞ Chrome).");
}