// =========================================================================
// 1. üîß BI·∫æN TO√ÄN C·ª§C & KH·ªûI T·∫†O
// =========================================================================

// Khai b√°o bi·∫øn to√†n c·ª•c
let questions = [];
let currentQuestionIndex = 0;
let selectedAnswers = [];
let showAnswerMode = false;
let autoNextDelay = 0;
let countdownInterval;
let timeLeftInSeconds = 0;
let originalQuestions = []; // L∆∞u danh s√°ch c√¢u h·ªèi g·ªëc
let isWrongQuestionsMode = false; // C·ªù ƒë·ªÉ x√°c ƒë·ªãnh ch·∫ø ƒë·ªô l√†m l·∫°i c√¢u sai
const API_BASE = 'http://localhost:3001/api';

// H√†m kh·ªüi t·∫°o khi t·∫£i trang
window.onload = async () => {
    await loadQuestions();          // T·∫£i c√¢u h·ªèi
    setupAutoNext();                // C√†i ƒë·∫∑t t·ª± ƒë·ªông chuy·ªÉn c√¢u

    // K√≠ch ho·∫°t n√∫t ch·ªçn ch·∫ø ƒë·ªô sau khi t·∫£i xong
    document.querySelectorAll('button[id^="btn-mode"]').forEach(btn => {
        btn.disabled = false;
    });

    // üåô ƒê·∫∑t ch·∫ø ƒë·ªô t·ªëi l√†m m·∫∑c ƒë·ªãnh khi t·∫£i trang
    document.body.classList.add('dark');

    // Auto check xem c√≥ ƒëƒÉng nh·∫≠p kh√¥ng
    const username = sessionStorage.getItem("username");
    if (username) {
        renderApp(); // ƒê√£ login ‚Üí hi·ªÉn th·ªã giao di·ªán ch√≠nh
    } else {
        renderLoginForm(); // Ch∆∞a login ‚Üí hi·ªÉn th·ªã form ƒëƒÉng nh·∫≠p
    }
};

// =========================================================================
// 2. üì¶ X·ª¨ L√ù D·ªÆ LI·ªÜU & TR·∫†NG TH√ÅI
// =========================================================================

// T·∫£i danh s√°ch c√¢u h·ªèi t·ª´ server
async function loadQuestions() {
    try {
        const res = await fetch('/questions');
        questions = await res.json();
        originalQuestions = JSON.parse(JSON.stringify(questions)); // Sao l∆∞u c√¢u h·ªèi g·ªëc
        selectedAnswers = new Array(questions.length).fill(null);
    } catch (err) {
        alert('Kh√¥ng th·ªÉ t·∫£i c√¢u h·ªèi!');
        console.error(err);
    }
}

// L·∫•y ch·ªâ s·ªë ƒë√∫ng t·ª´ k√Ω t·ª± (A=0, B=1, ...)
function getCorrectIndex(letter) {
    return letter.charCodeAt(0) - 65;
}

// Ki·ªÉm tra xem c√≥ ƒë√°p √°n ƒë√∫ng n√†o kh√¥ng h·ª£p l·ªá
function hasInvalidCorrectAnswers() {
    for (const q of questions) {
        if (!q.correct || typeof q.correct !== 'string' || getCorrectIndex(q.correct) >= q.answers.length) {
            return true;
        }
    }
    return false;
}

// =========================================================================
// 3. üñºÔ∏è HI·ªÇN TH·ªä C√ÇU H·ªéI & GIAO DI·ªÜN
// =========================================================================

// Hi·ªÉn th·ªã c√¢u h·ªèi hi·ªán t·∫°i
function renderQuestion() {
    const question = questions[currentQuestionIndex];
    if (!question) return;

    const questionTextEl = document.getElementById('question-text');

    // X√≥a n·ªôi dung c≈©
    questionTextEl.innerHTML = '';

    // N·∫øu c√≥ ·∫£nh th√¨ hi·ªÉn th·ªã ·∫£nh
    if (question.image) {
        const img = document.createElement('img');
        img.src = question.image;
        img.alt = 'Question Image';
        img.classList.add('question-image');
        img.onclick = () => img.classList.toggle('zoomed'); // Nh·∫•n v√†o ƒë·ªÉ ph√≥ng to/thu nh·ªè
        questionTextEl.appendChild(img);
    }

    // Th√™m n·ªôi dung c√¢u h·ªèi
    const text = document.createElement('div');
    text.innerText = `${currentQuestionIndex + 1}. ${question.question}`;
    questionTextEl.appendChild(text);

    // X·ª≠ l√Ω c√°c l·ª±a ch·ªçn
    const optionsEl = document.getElementById('options');
    optionsEl.innerHTML = '';

    question.answers.forEach((answer, i) => {
        const btn = document.createElement('button');
        btn.innerText = answer;
        btn.onclick = () => selectAnswer(i);

        if (selectedAnswers[currentQuestionIndex] === i) {
            btn.classList.add('selected');
        }

        if (showAnswerMode && selectedAnswers[currentQuestionIndex] !== null) {
            if (i === getCorrectIndex(question.correct)) {
                btn.style.border = '2px solid green';
            } else if (i === selectedAnswers[currentQuestionIndex] && i !== getCorrectIndex(question.correct)) {
                btn.style.border = '2px solid red';
            }
        }

        optionsEl.appendChild(btn);
    });

    updateQuestionButtons();
}


// T·∫°o danh s√°ch n√∫t c√¢u h·ªèi
function renderQuestionButtons() {
    const list = document.getElementById('question-list');
    list.innerHTML = '';
    questions.forEach((_, i) => {
        const btn = document.createElement('button');
        btn.innerText = i + 1;
        btn.onclick = () => {
            currentQuestionIndex = i;
            renderQuestion();
        };
        list.appendChild(btn);
    });
}

// C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t c√¢u h·ªèi
function updateQuestionButtons() {
    const buttons = document.querySelectorAll('#question-list button');
    buttons.forEach((btn, i) => {
        btn.classList.remove("active", "answered");
        if (i === currentQuestionIndex) btn.classList.add("active");
        if (selectedAnswers[i] !== null) btn.classList.add("answered");
    });
}

// =========================================================================
// 4. ‚úçÔ∏è X·ª¨ L√ù CH·ªåN ƒê√ÅP √ÅN & ƒêI·ªÄU H∆Ø·ªöNG
// =========================================================================

// Ch·ªçn ƒë√°p √°n
function selectAnswer(index) {
    selectedAnswers[currentQuestionIndex] = index;
    renderQuestion(); // C·∫≠p nh·∫≠t l·∫°i giao di·ªán ƒë·ªÉ hi·ªÉn th·ªã vi·ªÅn m√†u n·∫øu ·ªü ch·∫ø ƒë·ªô showAnswerMode
    if (autoNextDelay > 0) {
        setTimeout(() => nextQuestion(), autoNextDelay);
    }
    updateQuizProgress();
}

// Chuy·ªÉn ƒë·∫øn c√¢u h·ªèi tr∆∞·ªõc
function prevQuestion() {
    if (currentQuestionIndex > 0) {
        currentQuestionIndex--;
        renderQuestion();
    }
}

// Chuy·ªÉn ƒë·∫øn c√¢u h·ªèi ti·∫øp theo
function nextQuestion() {
    if (currentQuestionIndex < questions.length - 1) {
        currentQuestionIndex++;
        renderQuestion();
    }
}

// =========================================================================
// 5. üéØ B·∫ÆT ƒê·∫¶U QUIZ V·ªöI T√ôY CH·ªåN CH·∫æ ƒê·ªò
// =========================================================================

// X·ª≠ l√Ω b·∫Øt ƒë·∫ßu quiz
function handleStartQuiz(shuffleQuestions, shuffleAnswers, showAnswers) {
    if (hasInvalidCorrectAnswers()) {
        alert("‚ö†Ô∏è C√≥ c√¢u h·ªèi ch∆∞a ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a ƒë√°p √°n. Vui l√≤ng s·ª≠a tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu.");
        return;
    }
    isWrongQuestionsMode = false; // T·∫Øt ch·∫ø ƒë·ªô c√¢u sai
    startQuiz(shuffleQuestions, shuffleAnswers, showAnswers);
}

// Kh·ªüi t·∫°o quiz
function startQuiz(shuffleQuestions, shuffleAnswers, showAnswers) {
    if (!questions || questions.length === 0) {
        alert("C√¢u h·ªèi ch∆∞a ƒë∆∞·ª£c t·∫£i xong.");
        return;
    }

    if (shuffleQuestions == false && shuffleAnswers == false && showAnswers == false) {
        document.getElementById("mode-label").innerText = "B√¨nh th∆∞·ªùng";
    }
    if (shuffleQuestions == true && shuffleAnswers == true && showAnswers == false) {
        document.getElementById("mode-label").innerText = "Tr·ªôn c√¢u h·ªèi v√† ƒë√°p √°n";
    }
    if (shuffleQuestions == false && shuffleAnswers == true && showAnswers == false) {
        document.getElementById("mode-label").innerText = "Tr·ªôn ƒë√°p √°n";
    }
    if (shuffleQuestions == false && shuffleAnswers == true && showAnswers == true) {
        document.getElementById("mode-label").innerText = "Hi·ªÉn th·ªã ƒë√°p √°n";
    }

    showAnswerMode = showAnswers;

    if (shuffleQuestions) {
        questions = questions.sort(() => Math.random() - 0.5);
    }

    if (shuffleAnswers) {
        questions.forEach(q => {
            const correctIndex = getCorrectIndex(q.correct);
            const correctAnswer = q.answers[correctIndex];
            q.answers = q.answers.sort(() => Math.random() - 0.5);
            q.correct = String.fromCharCode(q.answers.indexOf(correctAnswer) + 65);
        });
    }

    selectedAnswers = new Array(questions.length).fill(null);
    currentQuestionIndex = 0;

    const timeLimitMinutes = parseInt(document.getElementById("time-limit-select").value);
    const countdownDisplay = document.getElementById("countdown");
    const timeInfo = document.getElementById("time-info");

    if (timeLimitMinutes > 0) {
        timeLeftInSeconds = timeLimitMinutes * 60;
        timeInfo.textContent = `${timeLimitMinutes} ph√∫t`;
        startCountdown();
    } else {
        timeLeftInSeconds = 0;
        timeInfo.textContent = "Kh√¥ng gi·ªõi h·∫°n";
        countdownDisplay.textContent = "--:--";
        clearInterval(countdownInterval);
    }

    document.getElementById("settings-popup").classList.add("hidden");
    renderQuestionButtons();
    renderQuestion();
    updateQuizProgress();
}

// =========================================================================
// 5.1 üéØ CH·∫æ ƒê·ªò L√ÄM L·∫†I C√ÇU SAI
// =========================================================================

// B·∫Øt ƒë·∫ßu quiz v·ªõi c√°c c√¢u h·ªèi sai
function startWrongQuestionsQuiz() {
    const wrongQuestions = originalQuestions.filter(q => q.wrongCount && q.wrongCount > 0);
    if (wrongQuestions.length === 0) {
        alert("üéâ Kh√¥ng c√≥ c√¢u h·ªèi n√†o b·∫°n l√†m sai!");
        closeScorePopup();
        return;
    }

    questions = JSON.parse(JSON.stringify(wrongQuestions));
    isWrongQuestionsMode = true;
    document.getElementById("mode-label").innerText = "L√†m l·∫°i c√¢u sai";
    showAnswerMode = false;

    selectedAnswers = new Array(questions.length).fill(null);
    currentQuestionIndex = 0;

    const timeLimitMinutes = parseInt(document.getElementById("time-limit-select").value);
    const countdownDisplay = document.getElementById("countdown");
    const timeInfo = document.getElementById("time-info");

    if (timeLimitMinutes > 0) {
        timeLeftInSeconds = timeLimitMinutes * 60;
        timeInfo.textContent = `${timeLimitMinutes} ph√∫t`;
        startCountdown();
    } else {
        timeLeftInSeconds = 0;
        timeInfo.textContent = "Kh√¥ng gi·ªõi h·∫°n";
        countdownDisplay.textContent = "--:--";
        clearInterval(countdownInterval);
    }

    document.getElementById("score-popup").classList.add("hidden");
    renderQuestionButtons();
    renderQuestion();
    updateQuizProgress();
}

// =========================================================================
// 6. ‚è≥ ƒê·∫æM NG∆Ø·ª¢C TH·ªúI GIAN L√ÄM B√ÄI
// =========================================================================

// B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c
function startCountdown() {
    const countdownDisplay = document.getElementById("countdown");
    clearInterval(countdownInterval);

    countdownInterval = setInterval(() => {
        if (timeLeftInSeconds <= 0) {
            clearInterval(countdownInterval);
            countdownDisplay.textContent = "00:00";
            alert("H·∫øt th·ªùi gian! B√†i s·∫Ω ƒë∆∞·ª£c n·ªôp t·ª± ƒë·ªông.");
            handleSubmit();
            return;
        }

        const minutes = Math.floor(timeLeftInSeconds / 60);
        const seconds = timeLeftInSeconds % 60;
        countdownDisplay.textContent = `${String(minutes).padStart(2, "0")}:${String(seconds).padStart(2, "0")}`;
        timeLeftInSeconds--;
    }, 1000);
}

// =========================================================================
// 7. üìä N·ªòP B√ÄI & X·ª¨ L√ù K·∫æT QU·∫¢
// =========================================================================

// X·ª≠ l√Ω n·ªôp b√†i
function handleSubmit() {
    const unanswered = selectedAnswers.filter(ans => ans === null).length;
    if (unanswered > 0) {
        document.getElementById('confirm-submit-popup').classList.remove('hidden');
    } else {
        submitQuiz(false, false, false); // N·ªôp b√†i v·ªõi c√°c t√πy ch·ªçn m·∫∑c ƒë·ªãnh

    }
}

// X√°c nh·∫≠n n·ªôp b√†i
function confirmSubmit() {
    document.getElementById('confirm-submit-popup').classList.add('hidden');
    submitQuiz();
}

// ƒê√≥ng popup x√°c nh·∫≠n
function closeConfirmPopup() {
    document.getElementById('confirm-submit-popup').classList.add('hidden');
}

// X·ª≠ l√Ω n·ªôp b√†i v√† t√≠nh ƒëi·ªÉm
function submitQuiz() {
    let correct = 0;
    let unanswered = 0;

    // T·∫°o b·∫£n ƒë·ªì √°nh x·∫° c√¢u h·ªèi hi·ªán t·∫°i sang c√¢u h·ªèi g·ªëc
    const questionMap = new Map();
    questions.forEach((q, i) => {
        const originalIndex = originalQuestions.findIndex(oq => oq.question === q.question);
        if (originalIndex !== -1) {
            questionMap.set(i, originalIndex);
        }
    });

    // ƒê√°nh gi√° c√¢u tr·∫£ l·ªùi v√† c·∫≠p nh·∫≠t wrongCount
    questions.forEach((q, i) => {
        if (!q.correct) return;
        const userAnswer = selectedAnswers[i];
        const originalIndex = questionMap.get(i);

        if (userAnswer === null) {
            unanswered++;
        } else if (userAnswer === getCorrectIndex(q.correct)) {
            correct++;
        } else {
            // C·∫≠p nh·∫≠t wrongCount cho c√¢u h·ªèi g·ªëc
            if (originalIndex !== -1) {
                const originalQ = originalQuestions[originalIndex];
                if (!originalQ.wrongCount) {
                    originalQ.wrongCount = 1; // Th√™m wrongCount n·∫øu ch∆∞a c√≥
                } else {
                    originalQ.wrongCount += 1; // TƒÉng wrongCount
                }
            }
        }
    });

    const wrong = questions.length - correct - unanswered;

    // Hi·ªÉn th·ªã k·∫øt qu·∫£
    document.getElementById('score-detail').innerText =
        `ƒê√∫ng: ${correct}, Sai: ${wrong}, B·ªè qua: ${unanswered}`;
    drawChart(correct, wrong, unanswered);

    const feedbackEl = document.getElementById("score-feedback");
    const total = questions.length;
    const percent = ((correct / total) * 100).toFixed(2);


    let feedback = "";
    if (percent === 100) feedback = "Xu·∫•t s·∫Øc! B·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng t·∫•t c·∫£ c√°c c√¢u.";
    else if (percent >= 80) feedback = "R·∫•t t·ªët! B·∫°n c√≥ ki·∫øn th·ª©c v·ªØng.";
    else if (percent >= 50) feedback = "Kh√° ·ªïn! C·∫ßn luy·ªán t·∫≠p th√™m.";
    else feedback = "C·∫ßn c·ªë g·∫Øng h∆°n. H√£y √¥n t·∫≠p l·∫°i nh√©!";

    feedbackEl.textContent = feedback;
    document.getElementById('score-popup').classList.remove('hidden');

    // Reset wrongCount v·ªÅ 0 n·∫øu ·ªü ch·∫ø ƒë·ªô c√¢u sai v√† tr·∫£ l·ªùi ƒë√∫ng
    if (isWrongQuestionsMode) {
        questions.forEach((q, i) => {
            const originalIndex = originalQuestions.findIndex(oq => oq.question === q.question);
            if (originalIndex !== -1 && selectedAnswers[i] === getCorrectIndex(q.correct)) {
                originalQuestions[originalIndex].wrongCount = 0; // Reset wrongCount n·∫øu tr·∫£ l·ªùi ƒë√∫ng
            }
        });
        isWrongQuestionsMode = false;
    }

    // G·ª≠i d·ªØ li·ªáu c·∫≠p nh·∫≠t v·ªÅ server
    fetch('/update-questions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(originalQuestions) // G·ª≠i danh s√°ch g·ªëc ƒë√£ c·∫≠p nh·∫≠t
    })
        .then(res => {
            if (!res.ok) throw new Error('L·ªói khi g·ª≠i y√™u c·∫ßu');
            return res.json();
        })
        .then(data => {
            console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t file:', data.message);
            // C·∫≠p nh·∫≠t questions t·ª´ originalQuestions ƒë·ªÉ ƒë·ªìng b·ªô
            questions = JSON.parse(JSON.stringify(originalQuestions));
        })
        .catch(err => {
            console.error('‚ùå L·ªói khi g·ª≠i d·ªØ li·ªáu:', err);
            alert('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i.');
        });

    // G·ª≠i th·ªëng k√™ k·∫øt qu·∫£ v·ªÅ MongoDB
    const username = sessionStorage.getItem('username');
    if (!username) {
        console.warn("Kh√¥ng c√≥ username trong sessionStorage.");
        alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi l√†m b√†i.");
        return;
    }

    fetch("/submit-stats", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            username,
            correct,
            wrong,
            unanswered,
            percent,
            total: questions.length,
            timestamp: new Date().toISOString()
        })
    })
        .then(res => {
            if (!res.ok) throw new Error('G·ª≠i th·ªëng k√™ th·∫•t b·∫°i');
            return res.json();
        })
        .then(data => {
            console.log('‚úÖ ƒê√£ l∆∞u th·ªëng k√™ v√†o MongoDB:', data.message);
        })
        .catch(err => {
            console.error('‚ùå L·ªói khi g·ª≠i th·ªëng k√™:', err);
        });



    // Reset tr·∫°ng th√°i sau khi n·ªôp
    selectedAnswers = new Array(questions.length).fill(null);
    currentQuestionIndex = 0;
    renderQuestionButtons();
    renderQuestion();
}

// ƒê√≥ng popup ƒëi·ªÉm
function closeScorePopup() {
    document.getElementById('score-popup').classList.add('hidden');
    startQuiz(false, false, false); // B·∫Øt ƒë·∫ßu l·∫°i quiz v·ªõi ch·∫ø ƒë·ªô b√¨nh th∆∞·ªùng
}

// V·∫Ω bi·ªÉu ƒë·ªì k·∫øt qu·∫£
function drawChart(correct, wrong, skipped) {
    google.charts.load('current', { packages: ['corechart'] });
    google.charts.setOnLoadCallback(() => {
        const data = google.visualization.arrayToDataTable([
            ['Lo·∫°i', 'S·ªë l∆∞·ª£ng'],
            ['ƒê√∫ng', correct],
            ['Sai', wrong],
            ['B·ªè qua', skipped],
        ]);

        const options = {
            title: 'K·∫øt qu·∫£ b√†i l√†m',
            pieHole: 0.4,
            colors: ['#28a745', '#dc3545', '#ffc107'],
        };

        const chart = new google.visualization.PieChart(
            document.getElementById('score-chart')
        );
        chart.draw(data, options);
    });
}

// =========================================================================
// 8. ‚öôÔ∏è C√ÄI ƒê·∫∂T T·ª∞ ƒê·ªòNG CHUY·ªÇN C√ÇU H·ªéI
// =========================================================================

// C√†i ƒë·∫∑t t·ª± ƒë·ªông chuy·ªÉn c√¢u h·ªèi
// C√†i ƒë·∫∑t t·ª± ƒë·ªông chuy·ªÉn c√¢u h·ªèi
function setupAutoNext() {
    const sidebarSelect = document.getElementById('sidebar-auto-next');
    const popupSelect = document.getElementById('popup-auto-next');

    // ƒê·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh cho c√°c select elements l√† 1000ms
    sidebarSelect.value = '1000';
    popupSelect.value = '1000';

    // Kh·ªüi t·∫°o autoNextDelay v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† 1000ms
    autoNextDelay = 1000;

    const updateDelay = () => {
        autoNextDelay = parseInt(sidebarSelect.value);
        popupSelect.value = sidebarSelect.value;
    };

    sidebarSelect.onchange = updateDelay;
    popupSelect.onchange = () => {
        sidebarSelect.value = popupSelect.value;
        updateDelay();
    };
}

// =========================================================================
// 9. üåô CHUY·ªÇN CH·∫æ ƒê·ªò S√ÅNG / T·ªêI
// =========================================================================

// Chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô s√°ng/t·ªëi
function toggleTheme() {
    document.body.classList.toggle('dark');
    renderQuestion(); // C·∫≠p nh·∫≠t l·∫°i c√¢u h·ªèi v√† ƒë√°p √°n
    updateQuizProgress(); // C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
}

// =========================================================================
// 10. üîë FORM ƒêƒÇNG NH·∫¨P V√Ä X√ÅC TH·ª∞C
// =========================================================================


// ƒêƒÉng nh·∫≠p t√†i kho·∫£n
function handleLogin() {
    const API_BASE = '/api';
    const usernameInput = document.getElementById('admin-username') || document.getElementById('username');
    const passwordInput = document.getElementById('admin-password') || document.getElementById('password');
    const showUsername = document.querySelector('#user-name');
    const loginError = document.getElementById('login-error');
    const logoutBtn = document.querySelector('.logout-btn');
    const loginBtn = document.querySelector('.login-btn');

    const username = usernameInput?.value.trim();
    const password = passwordInput?.value.trim();

    // ‚úÖ Hardcode t·∫°m th·ªùi cho t√†i kho·∫£n admin
    if (username === 'admin' && password === '123') {
        const from = window.location.pathname || '/';
        window.location.href = `/admin/admin.html?from=${encodeURIComponent(from)}`;
        return; // d·ª´ng lu√¥n, kh√¥ng g·ªçi API n·ªØa
    }

    fetch(`${API_BASE}/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, password }),
    })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                if (showUsername) {
                    showUsername.innerText = `Xin ch√†o, ${username}!`;
                    logoutBtn?.classList.remove('hidden');
                    loginBtn?.classList.add('hidden');
                }

                if (data.isAdmin) {
                    const from = window.location.pathname || '/';
                    window.location.href = `/admin/admin.html?from=${encodeURIComponent(from)}`;
                } else {
                    closeLoginPopup?.();
                    console.log('ƒêƒÉng nh·∫≠p th√†nh c√¥ng!');
                }
            } else {
                loginError
                    ? loginError.innerText = 'Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u!'
                    : alert('Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u!');
            }
        })
        .catch(() => {
            loginError
                ? loginError.innerText = 'L·ªói k·∫øt n·ªëi t·ªõi server!'
                : alert('L·ªói k·∫øt n·ªëi t·ªõi server!');
        });
}




// DƒÉng k√Ω t√†i kho·∫£n m·ªõi
function handleRegister() {
    const username = document.getElementById('register-username').value;
    const email = document.getElementById('register-email').value;
    const password = document.getElementById('register-password').value;
    const timestamp = new Date().toISOString();

    fetch(`${API_BASE}/register`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, email, password, timestamp }),
    })
        .then((res) => res.json())
        .then((data) => {
            if (data.success) {
                alert('ƒêƒÉng k√Ω th√†nh c√¥ng! H√£y ƒëƒÉng nh·∫≠p.');
                showLoginForm();
            } else {
                document.getElementById('register-error').innerText = data.message;
            }
        })
        .catch(() => {
            document.getElementById('register-error').innerText = 'L·ªói k·∫øt n·ªëi t·ªõi server!';
        });
}

// X·ª≠ l√Ω ƒëƒÉng xu·∫•t
function handleLogout() {
    sessionStorage.clear(); // Xo√° to√†n b·ªô session client-side
    const showUsername = document.querySelector('#user-name');
    const logoutBtn = document.querySelector('.logout-btn');
    const loginBtn = document.querySelector('.login-btn');

    showUsername.innerText = ''; // Xo√° t√™n ng∆∞·ªùi d√πng hi·ªÉn th·ªã
    logoutBtn.classList.add('hidden'); // ·∫®n n√∫t ƒëƒÉng xu·∫•t
    loginBtn.classList.remove('hidden'); // Hi·ªÉn th·ªã l·∫°i n√∫t ƒëƒÉng nh·∫≠p
    showLoginForm(); // G·ªçi l·∫°i h√†m hi·ªÉn th·ªã form ƒëƒÉng nh·∫≠p
}

// 

// Hi·ªÉn th·ªã form ƒëƒÉng k√Ω
function showRegisterForm() {
    document.getElementById('login-form').style.display = 'none';
    document.getElementById('register-form').style.display = 'block';
}

// Hi·ªÉn th·ªã form ƒëƒÉng nh·∫≠p
function showLoginForm() {
    document.getElementById('register-form').style.display = 'none';
    document.getElementById('login-form').style.display = 'block';
    document.getElementById('login-popup').classList.remove('hidden');

}

// ƒê√≥ng popup ƒëƒÉng nh·∫≠p
function closeLoginPopup() {
    document.getElementById('login-popup').classList.add('hidden');
    const logoutBtn = document.querySelector('.logout-btn');
    // logoutBtn.classList.add('hidden');
}


// =========================================================================
// 11. üìè C·∫¨P NH·∫¨T THANH TI·∫æN TR√åNH
// =========================================================================

// C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
function updateQuizProgress() {
    const total = questions.length;
    const answered = selectedAnswers.filter(a => a !== null).length;
    const percent = Math.round((answered / total) * 100);

    const bar = document.getElementById('quiz-progress-bar');
    const text = document.getElementById('quiz-progress-text');

    bar.style.width = `${percent}%`;

    // ƒê·ªïi m√†u theo % ti·∫øn ƒë·ªô
    if (percent < 30) {
        bar.style.background = 'linear-gradient(90deg, #dc3545, #ff6b6b)'; // ƒë·ªè
    } else if (percent < 70) {
        bar.style.background = 'linear-gradient(90deg, #ffc107, #ffe066)'; // v√†ng
    } else {
        bar.style.background = 'linear-gradient(90deg, #28a745, #85e085)'; // xanh
    }

    // N·ªôi dung ƒë·ªông
    let message = '';
    if (percent === 0) message = 'üöÄB·∫Øt ƒë·∫ßu nh√©!';
    else if (percent < 30) message = 'üê¢M·ªõi kh·ªüi ƒë·ªông th√¥i...';
    else if (percent < 60) message = 'üí™Ti·∫øp t·ª•c n√†o!';
    else if (percent < 90) message = 'üèÉ‚Äç‚ôÇÔ∏èG·∫ßn v·ªÅ ƒë√≠ch r·ªìi!';
    else if (percent < 100) message = 'üéØS·∫Øp ho√†n t·∫•t!';
    else message = 'Ho√†n th√†nh! üéâ';

    text.textContent = `${message} (${answered}/${total})`;
}

// =========================================================================
// 12. üìè RESPONSIVE
// =========================================================================
document.addEventListener('DOMContentLoaded', () => {
    const hamburgerBtn = document.getElementById('hamburger-btn');
    const sidebar = document.getElementById('sidebar');

    hamburgerBtn.addEventListener('click', () => {
        sidebar.classList.toggle('active');
    });

    // T√πy ch·ªçn: ƒê√≥ng sidebar khi nh·∫•p ra ngo√†i
    document.addEventListener('click', (e) => {
        if (!sidebar.contains(e.target) && !hamburgerBtn.contains(e.target)) {
            sidebar.classList.remove('active');
        }
    });
});