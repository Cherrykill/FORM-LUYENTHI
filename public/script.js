// =========================================================================
// 1. üîß BI·∫æN TO√ÄN C·ª§C & KH·ªûI T·∫†O
// =========================================================================

// Khai b√°o bi·∫øn to√†n c·ª•c
let questions = [];
let currentQuestionIndex = 0;
let selectedAnswers = [];
let showAnswerMode = false;
let autoNextDelay = 0;
let countdownInterval;
let timeLeftInSeconds = 0;
let originalQuestions = []; // L∆∞u danh s√°ch c√¢u h·ªèi g·ªëc
let isWrongQuestionsMode = false; // C·ªù ƒë·ªÉ x√°c ƒë·ªãnh ch·∫ø ƒë·ªô l√†m l·∫°i c√¢u sai
const API_BASE = 'http://localhost:5000/api';

// üîä KHAI B√ÅO C√ÅC ƒê·ªêI T∆Ø·ª¢NG √ÇM THANH M·ªöI
const correctSound = new Audio('./sounds/correct.mp3'); 
const incorrectSound = new Audio('./sounds/incorrect.mp3'); 

// H√†m kh·ªüi t·∫°o khi t·∫£i trang
window.onload = async () => {
    await loadQuestions(); // T·∫£i c√¢u h·ªèi
    setupAutoNext(); // C√†i ƒë·∫∑t t·ª± ƒë·ªông chuy·ªÉn c√¢u

    // K√≠ch ho·∫°t n√∫t ch·ªçn ch·∫ø ƒë·ªô sau khi t·∫£i xong
    document.querySelectorAll('button[id^="btn-mode"]').forEach(btn => {
        btn.disabled = false;
    });

    // üåô ƒê·∫∑t ch·∫ø ƒë·ªô t·ªëi l√†m m·∫∑c ƒë·ªãnh khi t·∫£i trang
    document.body.classList.add('dark');

    // Auto check xem c√≥ ƒëƒÉng nh·∫≠p kh√¥ng
    const username = sessionStorage.getItem("username");
    if (username) {
        // ‚úÖ C·∫≠p nh·∫≠t giao di·ªán khi ƒë√£ ƒëƒÉng nh·∫≠p
        const showUsername = document.querySelector('#user-name');
        const logoutBtn = document.querySelector('.logout-btn');
        const loginBtn = document.querySelector('.login-btn');

        showUsername && (showUsername.innerText = `Xin ch√†o, ${username}!`);
        logoutBtn?.classList.remove('hidden');
        loginBtn?.classList.add('hidden');

        renderApp(); // Hi·ªÉn th·ªã giao di·ªán quiz
    } else {
        showLoginForm(); // Ch∆∞a login ‚Üí hi·ªÉn th·ªã form ƒëƒÉng nh·∫≠p
    }
};

// =========================================================================
// 2. üì¶ X·ª¨ L√ù D·ªÆ LI·ªÜU & TR·∫†NG TH√ÅI
// =========================================================================

// T·∫£i danh s√°ch c√¢u h·ªèi t·ª´ server
async function loadQuestions() {
    try {
        const res = await fetch('/questions');
        questions = await res.json();
        // Validate and filter questions
        const invalidQuestions = [];
        questions = questions.filter((q, index) => {
            if (!q.correct || typeof q.correct !== 'string' || getCorrectIndex(q.correct) >= q.answers.length) {
                invalidQuestions.push({ index, question: q.question, reason: getInvalidReason(q) });
                return false;
            }
            return true;
        });
        if (invalidQuestions.length > 0) {
            console.error("‚ùå Danh s√°ch c√¢u h·ªèi kh√¥ng h·ª£p l·ªá:");
            invalidQuestions.forEach(q => {
                console.error(`C√¢u ${q.index + 1}:`);
                console.error(`  Question: ${q.question || "(kh√¥ng c√≥)"}`);
                console.error(`  L√Ω do: ${q.reason || "Kh√¥ng r√µ"}`);
                console.error(`  Full question object:`, questions[q.index]);
                console.error("-----------------------------");
            });
            if (questions.length === 0) {
                alert("‚ö†Ô∏è Kh√¥ng c√≥ c√¢u h·ªèi h·ª£p l·ªá n√†o ƒë·ªÉ b·∫Øt ƒë·∫ßu quiz!\nVui l√≤ng ki·ªÉm tra console ƒë·ªÉ xem chi ti·∫øt c√°c l·ªói v√† s·ª≠a trong admin.");
                return;
            }
            console.warn(`‚ö†Ô∏è C√≥ ${invalidQuestions.length} c√¢u h·ªèi kh√¥ng h·ª£p l·ªá. Ch·ªâ s·ª≠ d·ª•ng ${questions.length} c√¢u h·ªèi h·ª£p l·ªá.`);
        }
        originalQuestions = JSON.parse(JSON.stringify(questions)); // Sao l∆∞u c√¢u h·ªèi h·ª£p l·ªá
        selectedAnswers = new Array(questions.length).fill(null);
    } catch (err) {
        alert('Kh√¥ng th·ªÉ t·∫£i c√¢u h·ªèi!');
        console.error(err);
    }
}

// L·∫•y l√Ω do c√¢u h·ªèi kh√¥ng h·ª£p l·ªá
function getInvalidReason(q) {
    if (!q.correct) return "ƒê√°p √°n ƒë√∫ng b·ªã thi·∫øu ho·∫∑c r·ªóng";
    if (typeof q.correct !== 'string') return `ƒê√°p √°n ƒë√∫ng kh√¥ng ph·∫£i chu·ªói (lo·∫°i: ${typeof q.correct})`;
    if (getCorrectIndex(q.correct) >= q.answers.length) return `ƒê√°p √°n ƒë√∫ng '${q.correct}' v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng ƒë√°p √°n (${q.answers.length})`;
    return "L√Ω do kh√¥ng x√°c ƒë·ªãnh";
}

// L·∫•y ch·ªâ s·ªë ƒë√∫ng t·ª´ k√Ω t·ª± (A=0, B=1, ...)
function getCorrectIndex(letter) {
    if (!letter) return -1; // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p correct b·ªã thi·∫øu
    return letter.charCodeAt(0) - 65;
}

// Ki·ªÉm tra xem c√≥ ƒë√°p √°n ƒë√∫ng n√†o kh√¥ng h·ª£p l·ªá
function hasInvalidCorrectAnswers() {
    for (let i = 0; i < questions.length; i++) {
        const q = questions[i];
        if (!q.correct || typeof q.correct !== 'string' || getCorrectIndex(q.correct) >= q.answers.length) {
            console.error(`C√¢u h·ªèi kh√¥ng h·ª£p l·ªá t·∫°i v·ªã tr√≠ ${i + 1}:`, {
                question: q.question,
                correct: q.correct,
                answers: q.answers,
                reason: getInvalidReason(q)
            });
            return true;
        }
    }
    return false;
}

// =========================================================================
// 3. üñºÔ∏è HI·ªÇN TH·ªä C√ÇU H·ªéI & GIAO DI·ªÜN
// =========================================================================

// H√†m hi·ªÉn th·ªã giao di·ªán ch√≠nh (quiz) v√† ·∫©n form ƒëƒÉng nh·∫≠p
function renderApp() {
    document.getElementById('login-popup').classList.add('hidden');
    renderQuestionButtons();
    renderQuestion();
    updateQuizProgress();
}

// Hi·ªÉn th·ªã c√¢u h·ªèi hi·ªán t·∫°i
function renderQuestion() {
    const question = questions[currentQuestionIndex];
    if (!question) return;

    const questionTextEl = document.getElementById('question-text');
    questionTextEl.innerHTML = '';

    if (question.image) {
        const img = document.createElement('img');
        img.src = question.image;
        img.alt = 'Question Image';
        img.classList.add('question-image');
        img.onclick = () => img.classList.toggle('zoomed');
        questionTextEl.appendChild(img);
    }

    const text = document.createElement('div');
    const formattedQuestion = question.question.replace(/\n/g, '<br>');
    text.innerHTML = `<strong>${currentQuestionIndex + 1}. ${formattedQuestion}</strong>`;
    questionTextEl.appendChild(text);

    const optionsEl = document.getElementById('options');
    optionsEl.innerHTML = ''; // X√≥a c√°c ƒë√°p √°n c≈©

    question.answers.forEach((answer, i) => {
        const btn = document.createElement('button');
        btn.innerText = answer;
        btn.onclick = () => selectAnswer(i);

        // ƒê√°nh d·∫•u tr·∫°ng th√°i "selected" n·∫øu ƒë√°p √°n ƒë√£ ƒë∆∞·ª£c ch·ªçn
        if (selectedAnswers[currentQuestionIndex] === i) {
            btn.classList.add('selected');
        }

        // N·∫øu ·ªü ch·∫ø ƒë·ªô hi·ªÉn th·ªã ƒë√°p √°n, √°p d·ª•ng style ƒë√∫ng/sai
        if (showAnswerMode && selectedAnswers[currentQuestionIndex] !== null) {
            const correctIndex = getCorrectIndex(question.correct);
            if (i === correctIndex) {
                btn.classList.add('correct');
                btn.style.border = '5px solid #28a745';
                btn.style.boxShadow = '0 0 5px rgba(40, 167, 69, 0.5)';
            } else if (i === selectedAnswers[currentQuestionIndex] && i !== correctIndex) {
                btn.classList.add('incorrect');
                btn.style.border = '5px solid #dc3545';
                btn.style.boxShadow = '0 0 5px rgba(220, 53, 69, 0.5)';
            }
        }

        // ƒê·∫£m b·∫£o n√∫t lu√¥n hi·ªÉn th·ªã, kh√¥ng b·ªã ·∫©n
        btn.style.display = 'block'; // Force hi·ªÉn th·ªã
        optionsEl.appendChild(btn);
    });

    updateQuestionButtons();
}

// T·∫°o danh s√°ch n√∫t c√¢u h·ªèi
function renderQuestionButtons() {
    const list = document.getElementById('question-list');
    list.innerHTML = '';
    questions.forEach((_, i) => {
        const btn = document.createElement('button');
        btn.innerText = i + 1;
        btn.onclick = () => {
            currentQuestionIndex = i;
            renderQuestion();
        };
        list.appendChild(btn);
    });
}

// C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† m√†u s·∫Øc cho c√°c n√∫t c√¢u h·ªèi trong sidebar
function updateQuestionButtons() {
    const buttons = document.querySelectorAll('#question-list button');
    buttons.forEach((btn, i) => {
        btn.classList.remove('active', 'answered', 'correct', 'incorrect');
        if (i === currentQuestionIndex) {
            btn.classList.add('active');
        }
        if (selectedAnswers[i] !== null) {
            btn.classList.add('answered');
            if (showAnswerMode) {
                const question = questions[i];
                const correctIndex = getCorrectIndex(question.correct);
                if (selectedAnswers[i] === correctIndex) {
                    btn.classList.add('correct');
                } else {
                    btn.classList.add('incorrect');
                }
            }
        }
    });
}

// =========================================================================
// 4. ‚úçÔ∏è X·ª¨ L√ù CH·ªåN ƒê√ÅP √ÅN & ƒêI·ªÄU H∆Ø·ªöNG
// =========================================================================

function selectAnswer(index) {
    selectedAnswers[currentQuestionIndex] = index;
    
    const question = questions[currentQuestionIndex];
    if (question && question.correct) {
        const correctIndex = getCorrectIndex(question.correct);
        correctSound.pause();
        correctSound.currentTime = 0;
        incorrectSound.pause();
        incorrectSound.currentTime = 0;

        if (index === correctIndex) {
            correctSound.play();
        } else {
            incorrectSound.play();
        }
    }
    
    // C·∫≠p nh·∫≠t giao di·ªán c√¢u h·ªèi, gi·ªØ c√°c ƒë√°p √°n hi·ªÉn th·ªã
    renderQuestion();
    
    // Ch·ªâ t·ª± ƒë·ªông chuy·ªÉn c√¢u n·∫øu kh√¥ng ·ªü ch·∫ø ƒë·ªô hi·ªÉn th·ªã ƒë√°p √°n
    if (autoNextDelay > 0 && !showAnswerMode) {
        setTimeout(() => nextQuestion(), autoNextDelay);
    }
    
    updateQuizProgress();
}

function prevQuestion() {
    if (currentQuestionIndex > 0) {
        currentQuestionIndex--;
        renderQuestion();
    }
}

function nextQuestion() {
    if (currentQuestionIndex < questions.length - 1) {
        currentQuestionIndex++;
        renderQuestion();
    }
}

// =========================================================================
// 5. üéØ B·∫ÆT ƒê·∫¶U QUIZ V·ªöI T√ôY CH·ªåN CH·∫æ ƒê·ªò
// =========================================================================

function handleStartQuiz(shuffleQuestions, shuffleAnswers, showAnswers) {
    if (questions.length === 0) {
        alert("Kh√¥ng c√≥ c√¢u h·ªèi h·ª£p l·ªá n√†o ƒë·ªÉ b·∫Øt ƒë·∫ßu quiz!");
        return;
    }
    isWrongQuestionsMode = false;
    startQuiz(shuffleQuestions, shuffleAnswers, showAnswers);
}

function startQuiz(shuffleQuestions, shuffleAnswers, showAnswers) {
    if (!questions || questions.length === 0) {
        alert("C√¢u h·ªèi ch∆∞a ƒë∆∞·ª£c t·∫£i xong.");
        return;
    }

    if (shuffleQuestions == false && shuffleAnswers == false && showAnswers == false) {
        document.getElementById("mode-label").innerText = "B√¨nh th∆∞·ªùng";
    }
    if (shuffleQuestions == true && shuffleAnswers == true && showAnswers == false) {
        document.getElementById("mode-label").innerText = "Tr·ªôn c√¢u h·ªèi v√† ƒë√°p √°n";
    }
    if (shuffleQuestions == false && shuffleAnswers == true && showAnswers == false) {
        document.getElementById("mode-label").innerText = "Tr·ªôn ƒë√°p √°n";
    }
    if (shuffleQuestions == false && shuffleAnswers == true && showAnswers == true) {
        document.getElementById("mode-label").innerText = "Hi·ªÉn th·ªã ƒë√°p √°n";
    }

    showAnswerMode = showAnswers;

    if (shuffleQuestions) {
        questions = questions.sort(() => Math.random() - 0.5);
    }

    if (shuffleAnswers) {
        questions.forEach(q => {
            const correctIndex = getCorrectIndex(q.correct);
            const correctAnswer = q.answers[correctIndex];
            q.answers = q.answers.sort(() => Math.random() - 0.5);
            q.correct = String.fromCharCode(q.answers.indexOf(correctAnswer) + 65);
        });
    }

    selectedAnswers = new Array(questions.length).fill(null);
    currentQuestionIndex = 0;

    const timeLimitMinutes = parseInt(document.getElementById("time-limit-select").value);
    const countdownDisplay = document.getElementById("countdown");
    const timeInfo = document.getElementById("time-info");

    if (timeLimitMinutes > 0) {
        timeLeftInSeconds = timeLimitMinutes * 60;
        timeInfo.textContent = `${timeLimitMinutes} ph√∫t`;
        startCountdown();
    } else {
        timeLeftInSeconds = 0;
        timeInfo.textContent = "Kh√¥ng gi·ªõi h·∫°n";
        countdownDisplay.textContent = "--:--";
        clearInterval(countdownInterval);
    }

    document.getElementById("settings-popup").classList.add("hidden");
    renderQuestionButtons();
    renderQuestion();
    updateQuizProgress();
}

// =========================================================================
// 5.1 üéØ CH·∫æ ƒê·ªò L√ÄM L·∫†I C√ÇU SAI
// =========================================================================

function startWrongQuestionsQuiz() {
    const wrongQuestions = originalQuestions.filter(q => q.wrongCount && q.wrongCount > 0);
    if (wrongQuestions.length === 0) {
        alert("üéâ Kh√¥ng c√≥ c√¢u h·ªèi n√†o b·∫°n l√†m sai!");
        closeScorePopup();
        return;
    }

    questions = JSON.parse(JSON.stringify(wrongQuestions));
    isWrongQuestionsMode = true;
    document.getElementById("mode-label").innerText = "L√†m l·∫°i c√¢u sai";
    showAnswerMode = false;

    selectedAnswers = new Array(questions.length).fill(null);
    currentQuestionIndex = 0;

    const timeLimitMinutes = parseInt(document.getElementById("time-limit-select").value);
    const countdownDisplay = document.getElementById("countdown");
    const timeInfo = document.getElementById("time-info");

    if (timeLimitMinutes > 0) {
        timeLeftInSeconds = timeLimitMinutes * 60;
        timeInfo.textContent = `${timeLimitMinutes} ph√∫t`;
        startCountdown();
    } else {
        timeLeftInSeconds = 0;
        timeInfo.textContent = "Kh√¥ng gi·ªõi h·∫°n";
        countdownDisplay.textContent = "--:--";
        clearInterval(countdownInterval);
    }

    document.getElementById("score-popup").classList.add("hidden");
    renderQuestionButtons();
    renderQuestion();
    updateQuizProgress();
}

// =========================================================================
// 6. ‚è≥ ƒê·∫æM NG∆Ø·ª¢C TH·ªúI GIAN L√ÄM B√ÄI
// =========================================================================

function startCountdown() {
    const countdownDisplay = document.getElementById("countdown");
    clearInterval(countdownInterval);

    countdownInterval = setInterval(() => {
        if (timeLeftInSeconds <= 0) {
            clearInterval(countdownInterval);
            countdownDisplay.textContent = "00:00";
            alert("H·∫øt th·ªùi gian! B√†i s·∫Ω ƒë∆∞·ª£c n·ªôp t·ª± ƒë·ªông.");
            handleSubmit();
            return;
        }

        const minutes = Math.floor(timeLeftInSeconds / 60);
        const seconds = timeLeftInSeconds % 60;
        countdownDisplay.textContent = `${String(minutes).padStart(2, "0")}:${String(seconds).padStart(2, "0")}`;
        timeLeftInSeconds--;
    }, 1000);
}

// =========================================================================
// 7. üìä N·ªòP B√ÄI & X·ª¨ L√ù K·∫æT QU·∫¢
// =========================================================================

function handleSubmit() {
    clearInterval(countdownInterval);
    timeLeftInSeconds = 0;
    
    const unanswered = selectedAnswers.filter(ans => ans === null).length;
    if (unanswered > 0) {
        document.getElementById('confirm-submit-popup').classList.remove('hidden');
    } else {
        submitQuiz();
    }
}

function confirmSubmit() {
    document.getElementById('confirm-submit-popup').classList.add('hidden');
    submitQuiz();
}

function closeConfirmPopup() {
    document.getElementById('confirm-submit-popup').classList.add('hidden');
}

function submitQuiz() {
    let correct = 0;
    let unanswered = 0;

    const questionMap = new Map();
    questions.forEach((q, i) => {
        const originalIndex = originalQuestions.findIndex(oq => oq.question === q.question);
        if (originalIndex !== -1) {
            questionMap.set(i, originalIndex);
        }
    });

    questions.forEach((q, i) => {
        if (!q.correct) return;
        const userAnswer = selectedAnswers[i];
        const originalIndex = questionMap.get(i);

        if (userAnswer === null) {
            unanswered++;
        } else if (userAnswer === getCorrectIndex(q.correct)) {
            correct++;
            if (isWrongQuestionsMode && originalIndex !== -1) {
                originalQuestions[originalIndex].wrongCount = 0;
            }
        } else {
            if (originalIndex !== -1) {
                const originalQ = originalQuestions[originalIndex];
                originalQ.wrongCount = (originalQ.wrongCount || 0) + 1;
            }
        }
    });

    const wrong = questions.length - correct - unanswered;
    showAnswerMode = true;
    isWrongQuestionsMode = false;

    document.getElementById('score-detail').innerText =
        `ƒê√∫ng: ${correct}, Sai: ${wrong}, B·ªè qua: ${unanswered}`;
    drawChart(correct, wrong, unanswered);

    const feedbackEl = document.getElementById("score-feedback");
    const total = questions.length;
    const percent = ((correct / total) * 100).toFixed(2);

    let feedback = "";
    if (percent === 100) feedback = "Xu·∫•t s·∫Øc! B·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng t·∫•t c·∫£ c√°c c√¢u.";
    else if (percent >= 80) feedback = "R·∫•t t·ªët! B·∫°n c√≥ ki·∫øn th·ª©c v·ªØng.";
    else if (percent >= 50) feedback = "Kh√° ·ªïn! C·∫ßn luy·ªán t·∫≠p th√™m.";
    else feedback = "C·∫ßn c·ªë g·∫Øng h∆°n. H√£y √¥n t·∫≠p l·∫°i nh√©!";

    feedbackEl.textContent = feedback;
    document.getElementById('score-popup').classList.remove('hidden');

    fetch('/update-questions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(originalQuestions)
    })
        .then(res => {
            if (!res.ok) throw new Error('L·ªói khi g·ª≠i y√™u c·∫ßu');
            return res.json();
        })
        .then(data => {
            console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t file:', data.message);
            questions = JSON.parse(JSON.stringify(originalQuestions));
        })
        .catch(err => {
            console.error('‚ùå L·ªói khi g·ª≠i d·ªØ li·ªáu:', err);
            alert('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i.');
        });

    const username = sessionStorage.getItem('username');
    if (!username) {
        console.warn("Kh√¥ng c√≥ username trong sessionStorage.");
        return;
    }

    fetch("/submit-stats", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            username,
            correct,
            wrong,
            unanswered,
            percent,
            total: questions.length,
            timestamp: new Date().toISOString()
        })
    })
        .then(res => {
            if (!res.ok) throw new Error('G·ª≠i th·ªëng k√™ th·∫•t b·∫°i');
            return res.json();
        })
        .then(data => {
            console.log('‚úÖ ƒê√£ l∆∞u th·ªëng k√™ v√†o MongoDB:', data.message);
        })
        .catch(err => {
            console.error('‚ùå L·ªói khi g·ª≠i th·ªëng k√™:', err);
        });

    renderQuestionButtons();
    renderQuestion();
}

function closeScorePopup() {
    document.getElementById('score-popup').classList.add('hidden');
    showAnswerMode = false;
    isWrongQuestionsMode = false;
    questions = JSON.parse(JSON.stringify(originalQuestions));
    selectedAnswers = new Array(questions.length).fill(null);
    currentQuestionIndex = 0;
    startQuiz(false, false, false);
}

function drawChart(correct, wrong, skipped) {
    google.charts.load('current', { packages: ['corechart'] });
    google.charts.setOnLoadCallback(() => {
        const data = google.visualization.arrayToDataTable([
            ['Lo·∫°i', 'S·ªë l∆∞·ª£ng'],
            ['ƒê√∫ng', correct],
            ['Sai', wrong],
            ['B·ªè qua', skipped],
        ]);

        const options = {
            title: 'K·∫øt qu·∫£ b√†i l√†m',
            pieHole: 0.4,
            colors: ['#28a745', '#dc3545', '#ffc107'],
        };

        const chart = new google.visualization.PieChart(
            document.getElementById('score-chart')
        );
        chart.draw(data, options);
    });
}

// =========================================================================
// 8. ‚öôÔ∏è C√ÄI ƒê·∫∂T T·ª∞ ƒê·ªòNG CHUY·ªÇN C√ÇU H·ªéI
// =========================================================================

function setupAutoNext() {
    const sidebarSelect = document.getElementById('sidebar-auto-next');
    const popupSelect = document.getElementById('popup-auto-next');

    sidebarSelect.value = '1000';
    popupSelect.value = '1000';
    autoNextDelay = 1000;

    const updateDelay = () => {
        autoNextDelay = parseInt(sidebarSelect.value);
        popupSelect.value = sidebarSelect.value;
    };

    sidebarSelect.onchange = updateDelay;
    popupSelect.onchange = () => {
        sidebarSelect.value = popupSelect.value;
        updateDelay();
    };
}

// =========================================================================
// 9. üåô CHUY·ªÇN CH·∫æ ƒê·ªò S√ÅNG / T·ªêI
// =========================================================================

function toggleTheme() {
    document.body.classList.toggle('dark');
    renderQuestion();
    updateQuizProgress();
}

// =========================================================================
// 10. üîë FORM ƒêƒÇNG NH·∫¨P V√Ä X√ÅC TH·ª∞C
// =========================================================================

function handleLogin(defaultRedirect = "admin") {
    const API_BASE = '/api';
    const usernameInput = document.getElementById('admin-username') || document.getElementById('username');
    const passwordInput = document.getElementById('admin-password') || document.getElementById('password');
    const showUsername = document.querySelector('#user-name');
    const loginError = document.getElementById('login-error');
    const logoutBtn = document.querySelector('.logout-btn');
    const loginBtn = document.querySelector('.login-btn');
    const fromPage = window.location.pathname || '/';

    if (!usernameInput || !passwordInput) {
        alert("Kh√¥ng t√¨m th·∫•y √¥ nh·∫≠p t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u.");
        return;
    }

    const username = usernameInput.value.trim();
    const password = passwordInput.value.trim();
    const redirectTo = redirectAfterLogin || defaultRedirect;

    if (loginError) loginError.innerText = '';

    if (username === 'admin' && password === '123') {
        sessionStorage.setItem("username", username);
        sessionStorage.setItem("isAdmin", "true");
        window.location.href = `/admin/${redirectTo}.html?from=${encodeURIComponent(fromPage)}`;
        redirectAfterLogin = null;
        return;
    }

    fetch(`${API_BASE}/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, password }),
    })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                sessionStorage.setItem("username", username);
                showUsername && (showUsername.innerText = `Xin ch√†o, ${username}!`);
                logoutBtn?.classList.remove('hidden');
                loginBtn?.classList.add('hidden');

                if (data.isAdmin) {
                    window.location.href = `/admin/${redirectTo}.html?from=${encodeURIComponent(fromPage)}`;
                    redirectAfterLogin = null;
                } else {
                    closeLoginPopup?.();
                    renderApp();
                    console.log('ƒêƒÉng nh·∫≠p th√†nh c√¥ng!');
                }
            } else {
                loginError
                    ? loginError.innerText = 'Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u!'
                    : alert('Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u!');
            }
        })
        .catch(() => {
            loginError
                ? loginError.innerText = 'L·ªói k·∫øt n·ªëi t·ªõi server!'
                : alert('L·ªói k·∫øt n·ªëi t·ªõi server!');
        });
}

function handleRegister() {
    const username = document.getElementById('register-username').value;
    const email = document.getElementById('register-email').value;
    const password = document.getElementById('register-password').value;
    const timestamp = new Date().toISOString();

    fetch(`${API_BASE}/register`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, email, password, timestamp }),
    })
        .then((res) => res.json())
        .then((data) => {
            if (data.success) {
                alert('ƒêƒÉng k√Ω th√†nh c√¥ng! H√£y ƒëƒÉng nh·∫≠p.');
                showLoginForm();
            } else {
                document.getElementById('register-error').innerText = data.message;
            }
        })
        .catch(() => {
            document.getElementById('register-error').innerText = 'L·ªói k·∫øt n·ªëi t·ªõi server!';
        });
}

function handleLogout() {
    sessionStorage.clear();
    const showUsername = document.querySelector('#user-name');
    const logoutBtn = document.querySelector('.logout-btn');
    const loginBtn = document.querySelector('.login-btn');

    showUsername.innerText = '';
    logoutBtn.classList.add('hidden');
    loginBtn.classList.remove('hidden');
    showLoginForm();
}

function showRegisterForm() {
    document.getElementById('login-form').style.display = 'none';
    document.getElementById('register-form').style.display = 'block';
}

function showLoginForm() {
    document.getElementById('register-form').style.display = 'none';
    document.getElementById('login-form').style.display = 'block';
    document.getElementById('login-popup').classList.remove('hidden');
}

function closeLoginPopup() {
    document.getElementById('login-popup').classList.add('hidden');
}

let redirectAfterLogin = null;

function loginDashboard() {
    console.log('loginDashboard called');
    redirectAfterLogin = "admin-dashboard";
    showLoginForm();
}

// =========================================================================
// 11. üìè C·∫¨P NH·∫¨T THANH TI·∫æN TR√åNH
// =========================================================================

function updateQuizProgress() {
    const total = questions.length;
    const answered = selectedAnswers.filter(a => a !== null).length;
    const percent = Math.round((answered / total) * 100);

    const bar = document.getElementById('quiz-progress-bar');
    const text = document.getElementById('quiz-progress-text');

    bar.style.width = `${percent}%`;

    if (percent < 30) {
        bar.style.background = 'linear-gradient(90deg, #dc3545, #ff6b6b)';
    } else if (percent < 70) {
        bar.style.background = 'linear-gradient(90deg, #ffc107, #ffe066)';
    } else {
        bar.style.background = 'linear-gradient(90deg, #28a745, #85e085)';
    }

    let message = '';
    if (percent === 0) message = 'üöÄB·∫Øt ƒë·∫ßu nh√©!';
    else if (percent < 30) message = 'üê¢M·ªõi kh·ªüi ƒë·ªông th√¥i...';
    else if (percent < 60) message = 'üí™Ti·∫øp t·ª•c n√†o!';
    else if (percent < 90) message = 'üèÉ‚Äç‚ôÇÔ∏èG·∫ßn v·ªÅ ƒë√≠ch r·ªìi!';
    else if (percent < 100) message = 'üéØS·∫Øp ho√†n t·∫•t!';
    else message = 'Ho√†n th√†nh! üéâ';

    text.textContent = `${message} (${answered}/${total})`;
}

// =========================================================================
// 12. üìè RESPONSIVE & POPUP DANH S√ÅCH C√ÇU H·ªéI
// =========================================================================

document.addEventListener('DOMContentLoaded', () => {
    const hamburgerBtn = document.getElementById('hamburger-btn');
    const sidebar = document.getElementById('sidebar');

    hamburgerBtn.addEventListener('click', () => {
        sidebar.classList.toggle('active');
    });

    document.addEventListener('click', (e) => {
        if (!sidebar.contains(e.target) && !hamburgerBtn.contains(e.target)) {
            sidebar.classList.remove('active');
        }
    });
});

// Hi·ªÉn th·ªã/·∫©n n√∫t d·ª±a tr√™n k√≠ch th∆∞·ªõc m√†n h√¨nh
function toggleQuestionListBtn() {
    const btn = document.getElementById('question-list-btn');
    if (window.innerWidth <= 768) {
        btn.style.display = 'block';
    } else {
        btn.style.display = 'none';
    }
}

// G·ªçi khi load v√† resize
window.addEventListener('load', toggleQuestionListBtn);
window.addEventListener('resize', toggleQuestionListBtn);

// H√†m ƒë√≥ng popup
function closeQuestionListPopup() {
    const popup = document.getElementById('question-list-popup');
    popup.classList.add('hidden');
}

// S·ª± ki·ªán m·ªü popup
document.getElementById('question-list-btn').addEventListener('click', () => {
    const popup = document.getElementById('question-list-popup');
    const popupContent = document.getElementById('question-list-popup-content');
    const questionList = document.getElementById('question-list');

    // Sao ch√©p n·ªôi dung t·ª´ #question-list
    popupContent.innerHTML = questionList.innerHTML || '<p>Ch∆∞a c√≥ c√¢u h·ªèi n√†o.</p>';

    // G√°n l·∫°i s·ª± ki·ªán cho c√°c n√∫t trong popup
    const popupButtons = popupContent.querySelectorAll('button');
    popupButtons.forEach((btn, index) => {
        // X√≥a s·ª± ki·ªán c≈© ƒë·ªÉ tr√°nh tr√πng l·∫∑p
        btn.removeEventListener('click', btn.onclick);
        btn.onclick = null;

        // G√°n s·ª± ki·ªán m·ªõi
        btn.addEventListener('click', () => {
            currentQuestionIndex = index;
            renderQuestion();
            closeQuestionListPopup();
        });
    });

    // Hi·ªÉn th·ªã popup
    popup.classList.remove('hidden');
});

// ƒê√≥ng popup khi nh·∫•n ra ngo√†i v√πng popup
document.getElementById('question-list-popup').addEventListener('click', (event) => {
    if (event.target.classList.contains('popup-overlay')) {
        closeQuestionListPopup();
    }
});